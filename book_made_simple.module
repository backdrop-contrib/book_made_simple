<?php
/**
 * @file
 * Automatically creates a book and simple creation of child pages.
 */

 /**
  * Implements hook_config_info().
  */
function book_made_simple_config_info() {
  $prefixes['book_made_simple.settings'] = array(
    'label' => t('BookMadeSimple settings'),
    'group' => 'Configuration',
  );
  return $prefixes;
}

/**
 * Implements hook_permision().
 */
function book_made_simple_permission() {
  return array(
    'administer books' => array(
      'title' => t("User will have all rights on books",
      )),
    'show book reorder tab' => array(
      'title' => t("Show core book reorder tab"),
    ),
    'show core Outline tab' => array(
      'title' => t("Show core Outline tab"),
    ),
    'show core Outline form element' => array(
      'title' => t("Show outline section in form elements."),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function book_made_simple_menu() {
  $items = array();
  $items['admin/config/content/book_made_simple'] = array(
    'title' => 'BookMadeSimple',
    'description' => 'Configuration of BookMadeSimple module',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('book_made_simple_settings_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => -10,
  );
  $items['node/%node/reorder'] = array(
    'title' => t('Reorder the book'),
    'page callback' => 'book_made_simple_reorder',
    'page arguments' => array(1),
    'access callback' => 'book_made_simple_is_reorder_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  return $items;
}

/**
 * Access callback for book outline tab.
 */
function book_made_simple_is_outline_access($node = NULL) {
  if (user_access('administer books')) {
    return TRUE;
  }
  if (isset($node->nid) && ! (user_access('add content to books') || user_access('administer book outlines'))) {
    return FALSE;
  }
  $config = config('book_made_simple.settings');
  $bookTypes = $config->get('auto_main_page');
  $bookType = (array_key_exists($node->type, $bookTypes) ? $bookTypes[$node->type] : NULL);
  $access = TRUE;
  if (NULL != $bookType && $bookType != "0" && $node->book['plid'] == 0) {
    $access = FALSE;
  }
  return $access && user_access("show core Outline tab") && book_made_simple_creator_only_access($node);
}

/**
 * Returns access rights for book.
 *
 * @param Node $node
 *   Node object.
 */
function book_made_simple_is_reorder_access($node = NULL) {
  // @todo: Use backdrop_static here to avoid multiple calls to the same function.
  $reorder_access = FALSE;
  if (isset($node->book) && $node->book['bid'] > 0) {
    if (user_access('administer books')) {
      $reorder_access = TRUE;
    }
    elseif (_book_outline_access($node) && user_access('show book reorder tab') && book_made_simple_creator_only_access($node)) {
      $reorder_access = TRUE;
    }
    // Checking visibility according to rules.
    $book = $node->book;
    $reorder_link = config_get('book_made_simple.settings', 'reorder_link');
    if ($reorder_access && empty($reorder_link)) {
      $mainBook = $book;
      if ($book['nid'] != $book['bid']) {
        $mainBook = node_load($book['bid'])->book;
      }
      $reorder_access = (count(book_toc($mainBook['bid'], 9999)) > 2);
    }
  }
  return $reorder_access;
}

/**
 * Creates shortuct to reorder book page from node object.
 */
function book_made_simple_reorder($node) {
  backdrop_goto("admin/content/book/" . $node->book['bid'], array(
    'query' => array(
      'destination' => "node/" . $node->nid,
    ),
  ));
}

/**
 * Implements hook_settings_form().
 */
function book_made_simple_settings_form($form, &$form_state) {
  $config = config('book_made_simple.settings');
  $form['#config'] = 'book_made_simple.settings';
  $types = node_type_get_names();
  $form['book_made_simple_content_types'] = array(
    '#type' => 'details',
    '#summary' => t('Content types'),
    '#open' => TRUE,
    '#attributes' => array('class' => array('allowed-child')),
  );
  $form['book_made_simple_content_types']['add_types'] = array(
    '#title' => t('Content types that can be included in books'),
    '#type' => 'checkboxes',
    '#options' => $types,
    '#multiple' => TRUE,
    '#default_value' => $config->get('add_types'),
    '#description' => t('Select the content types that can be included as children in a book.'),
  );
  $form['book_made_simple_content_types']['auto_main_page'] = array(
    '#title' => t('Auto-create main book page'),
    '#type' => 'checkboxes',
    '#options' => $types,
    '#multiple' => TRUE,
    '#default_value' => $config->get('auto_main_page'),
    '#description' => t('Select content types to automatically be set as the main page of a book.'),
  );
  $form['book_made_simple_other'] = array(
    '#type' => 'details',
    '#attributes' => array('class' => array('other-settings')),
    '#summary' => t('Other settings'),
    '#open' => TRUE,
  );
  $form['book_made_simple_other']['limit_depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Default limit book depth'),
    '#default_value' => $config->get('limit_depth'),
    '#description' => t('Maximum number of childs for a book'),
    '#maxlength' => 2,
    '#size' => 2,
  );
  $form['book_made_simple_other']['hide_default_add_child'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide default add child link'),
    '#default_value' => $config->get('hide_default_add_child'),
    '#description' => t('Check to hide default add child page link.'),
  );
  $form['book_made_simple_other']['child_list_style'] = array(
    '#type' => 'radios',
    '#title' => t('Style of child list'),
    '#options' => array(
      "DDLIST" => t("Dropdown listbox"),
      "LI" => t("Unordered list"),
      "THEME" => t("Themeable function"),
    ),
    '#default_value' => $config->get('child_list_style'),
    '#description' => t('Choose the style of the child list.'),
  );
  $form['book_made_simple_other']['child_list_style_position'] = array(
    '#type' => 'select',
    '#title' => t('Child list position in links area'),
    '#options' => array(
      "FIRST" => t("First"),
      "LAST" => t("Last"),
    ),
    '#default_value' => $config->get('child_list_style_position'),
    '#description' => t('Choose where to print child list in the links area'),
  );
  $form['book_made_simple_other']['reorder_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show reorder tab even if book is empty'),
    '#default_value' => $config->get('reorder_link'),
    '#description' => t('A book is considered empty when it has less than 2 subpages. In this case, does reordering make sense ?'),
  );
  $form['#attached']['css'][] = backdrop_get_path('module', 'book_made_simple') . '/css/book_made_simple.css';
  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 */
function book_made_simple_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $config = config('book_made_simple.settings');
  if (!empty($form['#node_edit_form'])) {
    $node = $form['#node'];
    $type = $form['type']['#value'];
    // Not a book => Nothing to do.
    if (! isset($node->book)) {
      return;
    }
    $book = $node->book;
    // 1 : Main page book. Verify if not forbidden
    $isMainForbidden = (array_key_exists($type, $config->get('forbid_main_page_creation')));
    $isForbidden = ($isMainForbidden && $book['bid'] == 0);
    if ($isMainForbidden && $user->uid != 1) {
      // $form['book']['bid']['#default_value'] = 0;
      $nid = empty($node->nid) ? 'new' : $node->nid;
      unset($form['book']['bid']['#options'][$nid]);
      $nid = isset($form['#node']->nid) ? $form['#node']->nid : '0';
      $form['#node']->book['original_bid'] = $nid;
    }
    $isOnlyForBook = array_key_exists($type, $config->get('only_on_books'));
    if ($isOnlyForBook) {
      if ($book['nid'] == "new" && ! empty($book["plid"]) && !book_made_simple_is_outline_access($form['#node'])) {
        $form = _book_made_simple_print_error("This type can't be created outside a book", $form['#id']);
        $form_state['process_input'] = FALSE;
        return;
      }
      // Remove <none> from book list.
      else {
      	unset($form['book']['bid']['#options'][0]);
      }
    }
    // 2 : Add child page : Verify if parent allowed
    // if (arg(1) == "add" && array_key_exists("parent", $_GET)) {
    if ($book['nid'] == "new" && ! empty($book["plid"]) && $book['plid'] > 0) {
      $parent = book_link_load($node->book["plid"]);
      if ($parent) {
        $parentNode = node_load($parent['nid']);
        $parentType = $parentNode->type;
        $allowedChilds = $config->get('for_type_' . $parentType);
        if (count($allowedChilds) > 0 && ! in_array($type, $allowedChilds)) {
          $form = _book_made_simple_print_error("This type is not allowed as child for type $parentType", $form['#id']);
          $form_state['process_input'] = FALSE;
          return;
        }
        if (! book_made_simple_creator_only_access($parentNode)) {
          $form = _book_made_simple_print_error("Only book creator can add child pages", $form['#id']);
          $form_state['process_input'] = FALSE;
          return;
        }
      }
    }
    // 3 : show/hide Outline section
    if (book_made_simple_is_outline_access($node)) {
      if (isset($node->nid) && book_made_simple_is_reorder_access($node)) {
        $form['book']['reorder'] = array(
          '#type' => 'item',
          '#markup' => l(t("Reorder the book"), "admin/content/book/" . $book['bid'], array('query' => array("destination" => "node/" . $node->nid))),
          '#description' => t("Shortcut to reorder the entire book"),
          '#weight' => 10,
        );
      }
    }
    else {
      $form['book']['#access'] = FALSE;
    }
    return $form;
  }
  switch ($form["#id"]) {
    case "node-type-form": // $type . '_node_settings':
      $type = $form["#node_type"]->type;
      $default = array_key_exists($type, $config->get('auto_main_page'));
      $form['book_made_simple'] = array(
        '#type' => 'fieldset',
        '#title' => t('BookMadeSimple'),
        '#group' => 'additional_settings',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['book_made_simple']['1'] = array(
        '#type' => 'details',
        '#summary' => t('Content type settings'),
        '#open' => FALSE,
      );
      $types = node_type_get_names();
      $form['book_made_simple']['1']['for_type'] = array(
        '#title' => t('Allowed child types'),
        '#description' => t('Select content types which may be used as children.'),
        '#type' => 'checkboxes',
        '#options' => $types,
        '#multiple' => TRUE,
        '#default_value' => $config->get('for_type_' . $type),
      );
      $aa = array();
      unset($types[$type]);
      foreach ($types as $ctype => $name) {
        $a = $config->get('for_type_' . $ctype);
        if (is_array($a) && array_search($type, $a) !== FALSE) {
          array_push($aa, $ctype);
        }
      }
      $form['book_made_simple']['1']['for_book'] = array(
        '#title' => t('Allowed parent types'),
        '#description' => t('Select content types which may be used as parents.'),
        '#type' => 'checkboxes',
        '#options' => $types,
        '#multiple' => TRUE,
        '#default_value' => $aa,
      );
      $form['book_made_simple']['3'] = array(
        '#type' => 'details',
        '#summary' => t('Other settings'),
        '#open' => TRUE,
      );
      $varTypes = $config->get('auto_main_page');
      $default = (array_key_exists($type, $varTypes) && $varTypes[$type] != "0");
      $form['book_made_simple']['3']['auto_main_page'] = array(
        '#attributes' => array('style' => 'float:none;clear:both'),
        '#type' => 'checkbox',
        '#title' => t('Auto create book main page'),
        '#default_value' => $default,
        '#description' => t('Checked will create a new book main page when adding.'),
      );
      $varTypes = $config->get('forbid_main_page_creation');
      $default = (is_array($varTypes) && array_key_exists($type, $varTypes) && $varTypes[$type] != "0");
      $form['book_made_simple']['3']['forbid_main_page_creation'] = array(
        '#type' => 'checkbox',
        '#title' => t('Forbid creation of book main page'),
        '#default_value' => $default,
        '#description' => t('Checked will prevent books from being manually created with this content type as main page type.'),
      );
      $varTypes = $config->get('only_on_books');
      $default = (is_array($varTypes) && array_key_exists($type, $varTypes) && $varTypes[$type] != "0");
      $form['book_made_simple']['3']['only_on_books'] = array(
        '#type' => 'checkbox',
        '#title' => t('Content type can only be created inside a book'),
        '#default_value' => $default,
        '#description' => t('Checked will prevent this content type be created outside a book.'),
      );
		  $varTypes = $config->get('only_creator');
		  $default = (is_array($varTypes) && array_key_exists($type, $varTypes) && $varTypes[$type] != "0");
		  $form['book_made_simple']['3']['only_creator'] = array(
		    '#type' => 'checkbox',
		    '#title' => t('Only creator can add child pages'),
		    '#default_value' => $default,
		    '#description' => t('Checked will prevent other users than creator to add child pages.'),
		  );

      $varTypes = $config->get('add_types');
      $default = (is_array($varTypes) && array_key_exists($type, $varTypes) && $varTypes[$type] != "0");
      $form['book_made_simple']['3']['add_types'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow content type as child of default book.'),
        '#default_value' => $default,
        '#description' => t('Checked will add this content-type to books where no content-types has been selected.'),
      );
      array_push($form['#submit'], "book_made_simple_form_submit");
      break;
  }
}

/**
 * Implements hook_form_submit().
 */
function book_made_simple_form_submit($form, &$form_state) {
  $config = config('book_made_simple.settings');
  $values = $form_state["values"];
  $type = $values["type"];

  $types = $config->get('auto_main_page');
  $types[$type] = (!empty($values["auto_main_page"])) ? $type : 0;
  $config->set('auto_main_page', $types);

  $types = $config->get('only_on_books');
  $types[$type] = (!empty($values["only_on_books"])) ? $type : 0;
  $config->set('only_on_books', $types);

  $types = $config->get('only_creator');
  $types[$type] = (!empty($values["only_creator"])) ? $type : 0;
  $config->set('only_creator', $types);

  $types = $config->get('forbid_main_page_creation');
  $types[$type] = (!empty($values["forbid_main_page_creation"])) ? $type : 0;
  $config->set('forbid_main_page_creation', $types);

  $types = $config->get('add_types');
  $types[$type] = (!empty($values["add_types"])) ? $type : 0;
  $config->set('add_types', $types);

  $for_type = $values["for_type"];
  if (is_array($for_type)) {
    $config->set("for_type_" . $type, $for_type);
  }

  $config->save();
}

/**
 * Creates dropdown list of links.
 *
 * @param string type
 *   Entity type.
 * @param object node
 *   Fully instantiated node object.
 * @param boolean $teaser
 *   Indicates whether or not the view mode is teaser.
 *
 * @return string
 *   Links of books to appear on node.
 */
function book_made_simple_link($type, $node = NULL, $teaser = FALSE) {
  $config = config('book_made_simple.settings');
  $links = array();
  if (isset($node->in_preview)) return $links;
  $max_depth = $config->get('limit_depth');
  if ($type == 'node' && !$teaser && isset($node->book["bid"]) && user_access('add content to books') && $node->status == 1 && (isset($node->book['depth']) ? $node->book['depth'] : 0) < $max_depth) {

    if (! book_made_simple_creator_only_access($node)) {
      return $links;
    }

    $html = "";
    $allowed_types = array();
    // Search for content type for this one.
    $atypes = $config->get('for_type_' . $node->type);
    $style = $config->get('child_list_style');
    // No content type, so print all.
    if (empty($atypes)) {
      $atypes = $config->get('add_types');
    }
    foreach ($atypes as $allowed_type => $allowed_name) {
      $atype  = node_type_get_type($allowed_name);
      if (is_object($atype) && node_access('create', $atype->type)) {
        $allowed_types[str_replace("_", "-", $atype->type)] = $atype->name;
      }
    }
    // Alter list if desired.
    backdrop_alter('book_made_simple_allowed_types_list', $allowed_types);
    $book_link = $node->book;
    if (count($allowed_types) > 0) {
      asort($allowed_types, SORT_STRING);
      if ($style == "LI") {
        foreach ($allowed_types as $type => $name) {
          $query = array("parent" => $node->book['mlid']);
          book_made_simple_og_manager($query);
          $links['book_made_simple_' . $type] = array(
            'title' => t('Add !content-type', array('!content-type' => t($name))),
            'href' => "node/add/" . $type,
            'query' => $query,
          );
        }
      }
      elseif ($style == "DDLIST") {
        $links['book_made_simple'] = array(
          'title' => "<span id='book_made_simple'>" . book_made_simple_add_child_book_content_types_ddlist($allowed_types, $node)  . "</span>",
          'html' => TRUE,
        );
      }
      else {
        $variables = array(
          'allowed_types' => $allowed_types,
          'node' => $node,
        );
        $links['book_made_simple'] = array(
          'title' => theme('add_child_book_content_types', $variables),
          'html' => TRUE,
        );
      }
    }
  }
  return $links;
}

/**
 *  Add gids[] param in url for Organic Group management.
 **/
function book_made_simple_og_manager(&$query) {
  if (module_exists('og') && module_exists('og_context')) {
    $group_node = og_context_determine_context('node');
    if ($group_node) {
      $nid = FALSE;
      if (og_is_member('node', $group_node)) {
         $nid = $group_node;
      }

      if ($nid !== FALSE) {
        if (is_array($query)) {
          $query['gids[]'] = $nid;
        }
        else {
          $query .= '&gids[]=' . $nid;
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function book_made_simple_theme() {
  return array(
    'add_child_book_content_types' => array(
      'variables' => array(
        'allowed_types' => [],
        'node' => NULL,
      ),
    ),
  );
}

/**
 * Themeable function to display allowed child types of book. You can override
 * this function easily to provide your own themed output.
 *
 * @param array $variables
 *   Array of variables keyed with:
 *   `allowed_types` - Array of allowed content types.
 *   `node` - Fully instantiated node object.
 *
 * @return
 *   Html code to display allowed child type
 */
function theme_add_child_book_content_types($variables = []) {
  $output = '';
  $allowed_types = (!empty($variables['allowed_types'])) ? $variables['allowed_types'] : [];
  $node = !empty($variables['node']) ? $variables['node'] : new Node();
  if (!empty($node->book)) {
    $output .= '<span>Add child: ';
    foreach ($allowed_types as $type => $name) {
      $query = array("parent" => $node->book['mlid']);
      book_made_simple_og_manager($query);
      $output .= l(t($name), "node/add/" . $type, array('query' => $query)) . " ";
    }
    $output .= '</span>';
  }
  return $output;
}

/**
 * Display allowed child type as dropdown listbox.
 *
 * @param array $allowed_types
 *   Allowed content types.
 * @param object $node
 *   Fully instantiated node object.
 *
 * @return string
 *   Select list of allowed child types.
 */
function book_made_simple_add_child_book_content_types_ddlist($allowed_types = [], &$node = new Node()) {
  $child_type = config_get('book.settings', 'book_child_type');
  $html = "<option value='" . str_replace('_', '-', $child_type) . "'>" . t("Add child page") . "</option>";
  foreach ($allowed_types as $type => $name) {
    $html .= "<option value='" . $type . "'>" . t($name) . "</option>";
  }
  $is_clean_url = config_get('system.core', 'clean_url');
  $url = url("node/add/");
  $op = ($is_clean_url) ? "?" : "&";
  $new_url = $url . "\" + this.value + \"" . $op . "parent=" . $node->book["mlid"];
  book_made_simple_og_manager($new_url);
  return "<select onchange='location.href=\"" . $new_url . "\"'>$html</select>";
}

/**
 * Implements hook_node_insert().
 */
function book_made_simple_node_insert($node) {
  $config = config('book_made_simple.settings');
  if (isset($node->book) && empty($node->book["bid"])) {
    $type = $node->type;
    $max_depth = $config->get('limit_depth');
    $isDepthAllowed = TRUE;
    if (array_key_exists('depth', $node->book)) {
      $isDepthAllowed = ($node->book['depth'] < $max_depth);
    }
    if ((user_access('add content to books') || user_access('administer book outlines')) &&
    node_access('create', $type) && $isDepthAllowed) {
      $bookTypes = $config->get('auto_main_page');
      $bookType = (array_key_exists($type, $bookTypes) ? $bookTypes[$type] : NULL);
      $toCreate = FALSE;
      if (NULL != $bookType && $bookType != "0") {
        $toCreate = TRUE;
      }
      if ($toCreate && ! isset($_GET['parent'])) {
        $node->book["bid"] = $node->nid;
        $node->book['nid'] = $node->nid;
        $node->book['module'] = 'book';
        $node->book['menu_name'] = book_menu_name($node->book['bid']);
        _book_update_outline($node);
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function book_made_simple_node_view($node, $view_mode, $langcode = 1) {
  if ((! empty($node->book["bid"])) && ($view_mode != "teaser")) {
    $r = book_made_simple_link("node", $node, FALSE);
    $node->content['links']['book_made_simple'] = array(
      '#theme' => 'links__node__book_made_simple',
      '#links' => $r,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_node_view_alter().
 */
function book_made_simple_node_view_alter(&$build) {
  if ( ! array_key_exists("#node", $build)) {
    return;
  }
  $config = config('book_made_simple.settings');
  $node = $build['#node'];
  if ((! empty($node->book["bid"])) && $build['#view_mode'] != "teaser" && array_key_exists('links', $build)) {

    if (array_key_exists("book_made_simple", $build['links'])) {
      $r = $build['links']["book_made_simple"];
      unset($build['links']["book_made_simple"]);
    }
    if (array_key_exists("book", $build['links'])) {
      if ($config->get('hide_default_add_child')) {
        unset($build['links']['book']['#links']["book_add_child"]);
      }
      if (!book_made_simple_is_reorder_access($node)) {
        unset($build['links']['book']['#links']["book_reorder"]);
      }
    }
    if (array_key_exists("book", $build['links']) && $config->get('hide_default_add_child')) {
      unset($build['links']['book']['#links']["book_add_child"]);
    }
    $position = $config->get('child_list_style_position');
    if ($position == "FIRST" && isset($r)) {
      array_unshift($build['links'], $r);
    }
    if ($position == "LAST" && isset($r)) {
      array_push($build['links'], $r);
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function book_made_simple_menu_alter(&$items) {
  if (isset($items['node/%node/outline'])) {
    $items['node/%node/outline']['access callback'] = 'book_made_simple_is_outline_access';
  }
}

/**
 * Preprocessor for menu_item_link.
 * Adds an ID attribute to menu links and helps the module
 * follow the recursion of menu_tree_output().
 */
function book_made_simple_theme_menu_item_link($link) {
  // Find out which theme function to dispatch to after preprocessing.
  $registry = theme_get_registry();
  if (isset($link['element']['#link']['path']) && $link['element']['#link']['path'] == 'node/%/outline' && ! user_access("show core Outline tab")) {
    return NULL;
  }
  $function = $registry['BMS']['menu_local_task']['function'];
  if ($function) {
    return $function($link);
  }
  return theme_menu_item_link($link);
}

/**
 * Formats error message including the form id.
 */
function _book_made_simple_print_error($message, $form_id) {
  $form = array();
  $form['#id'] = $form_id . '-node-form';
  $form['#tree'] = "";
  $form['#type'] = "form";
  $form['nid'] = array(
    '#type' => "value",
    '#value' => '',
  );
  $form['title'] = array(
    '#type' => 'item',
    '#title' => '',
    '#markup' => t($message),
  );
  return $form;
}

/**
 *
 */
function book_made_simple_creator_only_access($node) {
  global $user;
  $config = config('book_made_simple.settings');
  if (user_access('administer books')) {
    return TRUE;
  }
  if (! isset($node->nid) || ! isset($node->book)) {
    return TRUE;
  }
  if ($node->nid != $node->book['bid']) {
    if ( isset( $node->book['p1'] ) ) {
       $main = book_link_load( $node->book['p1'] );
       $main_node = node_load( $main['nid'] );
    }
  }
  $creator_only = array_key_exists($main_node->type, $config->get('only_creator'));
  if ($creator_only && $user->uid != 1 && $user->uid != $main_node->uid ) {
    return FALSE;
  }
  return TRUE;

}

/**
 * Implements hook new_book_object_alter from Outline Designer
 * @param unknown $node
 */
function book_made_simple_new_book_object_alter(&$node) {
    $form = array("#node_edit_form" => "dummy_form", "#node" => $node);
    $form['type']['#value'] = $node->type;
    $form_state['process_input'] = TRUE;
    book_made_simple_form_alter($form, $form_state, "");
  if ($form_state['process_input'] == FALSE) {
      $node = NULL;
  }

}
